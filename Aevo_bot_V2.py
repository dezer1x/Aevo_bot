import logging
import requests
import telebot
import sqlite3
import schedule
import time
import threading

logging.basicConfig(level=logging.INFO)
API_TOKEN = 'Bot_API_token'
bot = telebot.TeleBot(API_TOKEN)

def get_eth_data():
    url = "https://api.aevo.xyz/index?asset=ETH"
    headers = {"Accept": "application/json"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

def get_alldata():
    url = "https://api.aevo.xyz/assets"
    headers = {"Accept": "application/json"}
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

waiting_for_request = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_language = get_user_language(message.chat.id) 
    if user_language in texts:
        bot.reply_to(message, texts[user_language]['welcome'])
    else:
        bot.reply_to(message, texts['en']['welcome']) 

@bot.message_handler(commands=['help'])
def send_help(message):
    user_language = get_user_language(message.chat.id)
    if user_language in texts:
        bot.reply_to(message, texts[user_language]['help'], parse_mode='Markdown')
    else:
        bot.reply_to(message, texts['en']['help'], parse_mode='Markdown')

@bot.message_handler(commands=['assets'])
def send_assets(message):
    all_data = get_alldata()
    new_data = "\n".join(f"‚Ä¢ {item}" for item in all_data)
    if all_data:
        bot.reply_to(message, new_data)
    else:
        bot.reply_to(message, "Error, try again!")

@bot.message_handler(commands=['about'])
def send_about(message):
    user_language = get_user_language(message.chat.id)
    if user_language in texts:
        bot.reply_to(message, texts[user_language]['about'], parse_mode='Markdown')
    else:
        bot.reply_to(message, texts['en']['about'], parse_mode='Markdown')

@bot.message_handler(commands=['links'])
def send_links(message):
    markup = telebot.types.InlineKeyboardMarkup()
    website = telebot.types.InlineKeyboardButton(text='Website', url='https://www.aevo.xyz/')
    twitter = telebot.types.InlineKeyboardButton(text='Twitter', url='https://twitter.com/aevoxyz')
    discord = telebot.types.InlineKeyboardButton(text='Discord', url='https://discord.com/invite/aevo')
    trading = telebot.types.InlineKeyboardButton(text='Trading', url='https://app.aevo.xyz/perpetual/eth')
    github = telebot.types.InlineKeyboardButton(text='Github', url='https://github.com/aevoxyz')
    markup.add(website, twitter, discord, trading, github)
    user_language = get_user_language(message.chat.id)
    if user_language in texts:
        bot.reply_to(message, texts[user_language]['links_message'], reply_markup=markup)
    else:
        bot.reply_to(message, texts['en']['links_message'], reply_markup=markup)

def get_crypto_price(asset):
    url = f"https://api.aevo.xyz/index?asset={asset}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

@bot.message_handler(commands=['price'])
def send_price(message):
    user_language = get_user_language(message.chat.id)
    command, *ticker = message.text.split()
    if not ticker:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['price_error'])
        else:
            bot.reply_to(message, texts['en']['price_error'])
        return

    asset = ticker[0].upper() 
    asset_price = get_crypto_price(asset)
    if asset_price:
        formatted_price = f"{asset} - {float(asset_price['price']):.2f}$"
        bot.reply_to(message, formatted_price)
    else:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['error_try_again'])
        else:
            bot.reply_to(message, texts['en']['error_try_again'])

def get_crypto_funding(asset):
    url = f"https://api.aevo.xyz/funding?instrument_name={asset}-PERP"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

@bot.message_handler(commands=['funding'])
def send_funding(message):
    user_language = get_user_language(message.chat.id)
    command, *ticker = message.text.split()
    if not ticker:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['funding_error'])
        else:
            bot.reply_to(message, texts['en']['funding_error'])
        return

    asset = ticker[0].upper()
    asset_funding = get_crypto_funding(asset)
    if asset_funding:
        formatted_funding = f"{asset} - {float(asset_funding['funding_rate']):f}"
        bot.reply_to(message, formatted_funding)
    else:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['error_try_again'])
        else:
            bot.reply_to(message, texts['en']['error_try_again'])

texts = {
    'en': {
        'welcome': "Hello! I am the Helper bot for Aevo.\nType /help for a list of commands",
        'help': "All bot commands: \n/about - information about Aevo.\n/links - official links of Aevo.\n/assets - list of assets that are available for trading on Aevo.\n/price - view the price of assets.\n/funding - information about funding.",
        'about': "Aevo is a high-performance decentralized derivatives exchange platform, focused on options and perpetual contracts, runs on a custom EVM roll-up that rolls up to Ethereum.",
        'price_error': "Specify the asset ticker. For example: /price BTC",
        'funding_error': "Specify the asset ticker. For example: /funding BTC",
        'error_try_again': "Error, try again!",
        'language_set': "Your language has been set to {0}",
        'links_message': "Official AEVO links:",
        'available_languages': "Available languages:\nüá¨üáß EN - English\nüá∑üá∫ RU - Russian\nüá™üá∏ ES - Spanish\nüá∫üá¶ UA - Ukrainian\nüá´üá∑ FR - French\nüáµüá± PL - Polish\nüáÆüáπ IT - Italian",
        'lang_error': "Please specify a language after the command. For example: /lang en",
        'unsupported_language': "Unsupported language.",
        'set_alert_long_error': "Invalid command format. Please use the following format: /set_alert_long [asset ticker] [target price]",
        'set_alert_long_success': "üü¢Long alert set successfully.",
        'set_alert_short_error': "Invalid command format. Please use the following format: /set_alert_short [asset ticker] [target price]",
        'set_alert_short_success': "üî¥Short alert set successfully.",
        'asset_not_found': "Asset not found.",
        'price_of': "üî¥The price of",
        'fell_below_target': "has fallen below the target price of",
        'price_exceeded': "üü¢The price of",
        'target_price': "has exceeded the target price of"
    },
    'ua': {
        'welcome': "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è Aevo.\n–ù–∞–ø–∏—à—ñ—Ç—å /help, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥",
        'help': "–£—Å—ñ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:\n/about - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ Aevo.\n/links - –æ—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Aevo.\n/assets - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤—ñ–≤, –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥–ª—è —Ç–æ—Ä–≥—ñ–≤–ª—ñ –Ω–∞ Aevo.\n/price - –ø–µ—Ä–µ–≥–ª—è–¥ —Ü—ñ–Ω–∏ –∞–∫—Ç–∏–≤—ñ–≤.\n/funding - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ–∞–Ω–¥–∏–Ω–≥.",
        'about': "Aevo - —Ü–µ –≤–∏—Å–æ–∫–æ–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º—ñ–Ω—É –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∞–º–∏, –æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–∞ –Ω–∞ –æ–ø—Ü—ñ–æ–Ω–∏ —Ç–∞ –±–µ–∑—Å—Ç—Ä–æ–∫–æ–≤—ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∏, —â–æ –ø—Ä–∞—Ü—é—î –Ω–∞ –≤–ª–∞—Å–Ω–æ–º—É EVM roll-up, —è–∫–∏–π —Ä–æ–∑–≥–æ—Ä—Ç—É—î—Ç—å—Å—è –Ω–∞ Ethereum.",
        'price_error': "–í–∫–∞–∂—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–∫—Ç–∏–≤—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /price BTC",
        'funding_error': "–í–∫–∞–∂—ñ—Ç—å —Ç—ñ–∫–µ—Ä –∞–∫—Ç–∏–≤—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /funding BTC",
        'error_try_again': "–ü–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!",
        'language_set': "–ú–æ–≤–∞ –≤–∞—à–æ–≥–æ –±–æ—Ç–∞ –±—É–ª–∞ –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {0}",
        'links_message': "–û—Ñ—ñ—Ü—ñ–π–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è AEVO:",
        'available_languages': "–î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–≤–∏:\nüá¨üáß EN - –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞\nüá∑üá∫ RU - –†–æ—Å—ñ–π—Å—å–∫–∞\nüá™üá∏ ES - –Ü—Å–ø–∞–Ω—Å—å–∫–∞\nüá∫üá¶ UA - –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞\nüá´üá∑ FR - –§—Ä–∞–Ω—Ü—É–∑—å–∫–∞\nüáµüá± PL - –ü–æ–ª—å—Å—å–∫–∞\nüáÆüáπ IT - –Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞",
        'lang_error': "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥ –º–æ–≤–∏. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: /lang ua",
        'unsupported_language': "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –º–æ–≤–∞.",
        'set_alert_long_error': "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /set_alert_long [—Ç—ñ–∫–µ—Ä –∞–∫—Ç–∏–≤—É] [—Ü—ñ–ª—å–æ–≤–∞ —Ü—ñ–Ω–∞]",
        'set_alert_long_success': "üü¢Long –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        'set_alert_short_error': "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /set_alert_short [—Ç—ñ–∫–µ—Ä –∞–∫—Ç–∏–≤—É] [—Ü—ñ–ª—å–æ–≤–∞ —Ü—ñ–Ω–∞]",
        'set_alert_short_success': "üî¥Short –æ–ø–æ–≤—ñ—â–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        'asset_not_found': "–ê–∫—Ç–∏–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
        'price_of': "üî¥–¶—ñ–Ω–∞",
        'fell_below_target': "–≤–ø–∞–ª–∞ –Ω–∏–∂—á–µ —Ü—ñ–ª—å–æ–≤–æ—ó —Ü—ñ–Ω–∏",
        'price_exceeded': "üü¢–¶—ñ–Ω–∞",
        'target_price': "–ø–µ—Ä–µ–≤–∏—â–∏–ª–∞ —Ü—ñ–ª—å–æ–≤—É —Ü—ñ–Ω—É"
    },
    'ru': {
        'welcome': "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è Aevo.\n–í–≤–µ–¥–∏—Ç–µ /help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        'help': "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/about - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Aevo.\n/links - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ Aevo.\n/assets - —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–∞ Aevo.\n/price - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–æ–≤.\n/funding - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–Ω–¥–∏–Ω–≥–µ.",
        'about': "Aevo - —ç—Ç–æ –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ –¥–µ—Ä–∏–≤–∞—Ç–∏–≤–∞–º–∏, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞ –æ–ø—Ü–∏–æ–Ω—ã –∏ –±–µ—Å—Å—Ä–æ—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã, —Ä–∞–±–æ—Ç–∞—é—â–∞—è –Ω–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ EVM, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–π –Ω–∞ Ethereum.",
        'price_error': "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /price BTC",
        'funding_error': "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: /funding BTC",
        'error_try_again': "–û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!",
        'language_set': "–í–∞—à —è–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {0}",
        'links_message': "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ AEVO:",
        'available_languages': "–î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏:\nüá¨üáß EN - –ê–Ω–≥–ª–∏–π—Å–∫–∏–π\nüá∑üá∫ RU - –†—É—Å—Å–∫–∏–π\nüá™üá∏ ES - –ò—Å–ø–∞–Ω—Å–∫–∏–π\nüá∫üá¶ UA - –£–∫—Ä–∞–∏–Ω—Å–∫–∏–π\nüá´üá∑ FR - –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π\nüáµüá± PL - –ü–æ–ª—å—Å–∫–∏–π\nüáÆüáπ IT - –ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π",
        'lang_error': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /lang ru",
        'unsupported_language': "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —è–∑—ã–∫.",
        'set_alert_long_error': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: /set_alert_long [—Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞] [—Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞]",
        'set_alert_long_success': "üü¢Long –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        'set_alert_short_error': "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: /set_alert_short [—Ç–∏–∫–µ—Ä –∞–∫—Ç–∏–≤–∞] [—Ü–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞]",
        'set_alert_short_success': "üî¥Short –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.",
        'asset_not_found': "–ê–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
        'price_of': "üî¥–¶–µ–Ω–∞",
        'fell_below_target': "—É–ø–∞–ª–∞ –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã",
        'price_exceeded': "üü¢–¶–µ–Ω–∞",
        'target_price': "–ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É"
    },
    'es': {
        'welcome': "¬°Hola! Soy el bot ayudante de Aevo.\nEscribe /help para obtener una lista de comandos",
        'help': "Todos los comandos del bot: \n/about - informaci√≥n sobre Aevo.\n/links - enlaces oficiales de Aevo.\n/assets - lista de activos disponibles para negociar en Aevo.\n/price - ver el precio de los activos.\n/funding - informaci√≥n sobre funding.",
        'about': "Aevo es una plataforma descentralizada de alto rendimiento para derivados, enfocada en opciones y contratos perpetuos, que se ejecuta en un roll-up EVM personalizado que se roll up a Ethereum.",
        'price_error': "Especifica el ticker del activo. Por ejemplo: /price BTC",
        'funding_error': "Especifica el ticker del activo. Por ejemplo: /funding BTC",
        'error_try_again': "Error, ¬°int√©ntalo de nuevo!",
        'language_set': "Se ha establecido tu idioma en {0}",
        'links_message': "Enlaces oficiales AEVO:",
        'available_languages': "Idiomas disponibles:\nüá¨üáß EN - Ingl√©s\nüá∑üá∫ RU - Ruso\nüá™üá∏ ES - Espa√±ol\nüá∫üá¶ UA - Ucraniano\nüá´üá∑ FR - Franc√©s\nüáµüá± PL - Polaco\nüáÆüáπ IT - Italiano",
        'lang_error': "Por favor, especifica un idioma despu√©s del comando. Por ejemplo: /lang es",
        'unsupported_language': "Idioma no compatible.",
        'set_alert_long_error': "Formato de comando no v√°lido. Por favor, usa el siguiente formato: /set_alert_long [ticker de activo] [precio objetivo]",
        'set_alert_long_success': "üü¢Alerta long configurada correctamente.",
        'set_alert_short_error': "Formato de comando no v√°lido. Por favor, usa el siguiente formato: /set_alert_short [ticker de activo] [precio objetivo]",
        'set_alert_short_success': "üî¥Alerta short configurada correctamente.",
        'asset_not_found': "Activo no encontrado.",
        'price_of': "üî¥El precio de",
        'fell_below_target': "ha ca√≠do por debajo del precio objetivo de",
        'price_exceeded': "üü¢El precio de",
        'target_price': "ha superado el precio objetivo de"
    },
    'fr': {
        'welcome': "Salut! Je suis le bot assistant d'Aevo.\nTapez /help pour obtenir une liste de commandes",
        'help': "Toutes les commandes du bot: \n/about - informations sur Aevo.\n/links - liens officiels d'Aevo.\n/assets - liste des actifs disponibles pour le trading sur Aevo.\n/price - voir le prix des actifs.\n/funding - informations sur le funding.",
        'about': "Aevo est une plateforme de trading de d√©riv√©s d√©centralis√©e √† haute performance, ax√©e sur les options et les contrats perp√©tuels, fonctionnant sur un roll-up EVM personnalis√© qui se d√©ploie sur Ethereum.",
        'price_error': "Sp√©cifiez le ticker de l'actif. Par exemple: /price BTC",
        'funding_error': "Sp√©cifiez le ticker de l'actif. Par exemple: /funding BTC",
        'error_try_again': "Erreur, r√©essayez!",
        'language_set': "Votre langue a √©t√© d√©finie sur {0}",
        'links_message': "Liens officiels AEVO:",
        'available_languages': "Langues disponibles:\nüá¨üáß EN - Anglais\nüá∑üá∫ RU - Russe\nüá™üá∏ ES - Espagnol\nüá∫üá¶ UA - Ukrainien\nüá´üá∑ FR - Fran√ßais\nüáµüá± PL - Polonais\nüáÆüáπ IT - Italien",
        'lang_error': "Veuillez sp√©cifier une langue apr√®s la commande. Par exemple: /lang fr",
        'unsupported_language': "Langue non prise en charge.",
        'set_alert_long_error': "Format de commande invalide. Veuillez utiliser le format suivant: /set_alert_long [ticker d'actif] [prix cible]",
        'set_alert_long_success': "üü¢Alerte long configur√©e avec succ√®s.",
        'set_alert_short_error': "Format de commande invalide. Veuillez utiliser le format suivant: /set_alert_short [ticker d'actif] [prix cible]",
        'set_alert_short_success': "üî¥Alerte short configur√©e avec succ√®s.",
        'asset_not_found': "Actif non trouv√©.",
        'price_of': "üî¥Le prix de",
        'fell_below_target': "a chut√© en dessous du prix cible de",
        'price_exceeded': "üü¢Le prix de",
        'target_price': "a d√©pass√© le prix cible de"
    },
    'pl': {
        'welcome': "Cze≈õƒá! Jestem botem pomocnikiem dla Aevo.\nWpisz /help, aby uzyskaƒá listƒô polece≈Ñ",
        'help': "Wszystkie polecenia bota: \n/about - informacje o Aevo.\n/links - oficjalne linki Aevo.\n/assets - lista aktyw√≥w dostƒôpnych do handlu na Aevo.\n/price - wy≈õwietl cenƒô aktyw√≥w.\n/funding - informacje o funding.",
        'about': "Aevo to wysokowydajna zdecentralizowana platforma do handlu instrumentami pochodnymi, skoncentrowana na opcjach i kontraktach terminowych, dzia≈ÇajƒÖca na specjalnym EVM roll-up, kt√≥ry roll up do Ethereum.",
        'price_error': "Podaj ticker aktywa. Na przyk≈Çad: /price BTC",
        'funding_error': "Podaj ticker aktywa. Na przyk≈Çad: /funding BTC",
        'error_try_again': "B≈ÇƒÖd, spr√≥buj ponownie!",
        'language_set': "Twoje ustawienie jƒôzyka zosta≈Ço zmienione na {0}",
        'links_message': "Oficjalne linki AEVO:",
        'available_languages': "Dostƒôpne jƒôzyki:\nüá¨üáß EN - Angielski\nüá∑üá∫ RU - Rosyjski\nüá™üá∏ ES - Hiszpa≈Ñski\nüá∫üá¶ UA - Ukrai≈Ñski\nüá´üá∑ FR - Francuski\nüáµüá± PL - Polski\nüáÆüáπ IT - W≈Çoski",
        'lang_error': "Proszƒô podaƒá jƒôzyk po komendzie. Na przyk≈Çad: /lang pl",
        'unsupported_language': "Nieobs≈Çugiwany jƒôzyk.",
        'set_alert_long_error': "Nieprawid≈Çowy format komendy. U≈ºyj nastƒôpujƒÖcego formatu: /set_alert_long [symbol aktywa] [cena docelowa]",
        'set_alert_long_success': "üü¢Long powiadomienie ustawione pomy≈õlnie.",
        'set_alert_short_error': "Nieprawid≈Çowy format komendy. U≈ºyj nastƒôpujƒÖcego formatu: /set_alert_short [symbol aktywa] [cena docelowa]",
        'set_alert_short_success': "üî¥Short powiadomienie ustawione pomy≈õlnie.",
        'asset_not_found': "Nie znaleziono aktywa.",
        'price_of': "üî¥Cena",
        'fell_below_target': "spad≈Ça poni≈ºej docelowej ceny",
        'price_exceeded': "üü¢Cena",
        'target_price': "przekroczy≈Ça docelowƒÖ cenƒô"
    },
    'it': {
        'welcome': "Ciao! Sono il bot assistente di Aevo.\nDigita /help per ottenere una lista di comandi",
        'help': "Tutti i comandi del bot: \n/about - informazioni su Aevo.\n/links - link ufficiali di Aevo.\n/assets - elenco degli asset disponibili per il trading su Aevo.\n/price - visualizza il prezzo degli asset.\n/funding - informazioni sul funding.",
        'about': "Aevo √® una piattaforma decentralizzata ad alte prestazioni per derivati, focalizzata su opzioni e contratti perpetui, che funziona su un roll-up EVM personalizzato che si roll up su Ethereum.",
        'price_error': "Specifica il ticker dell'asset. Ad esempio: /price BTC",
        'funding_error': "Specifica il ticker dell'asset. Ad esempio: /funding BTC",
        'error_try_again': "Errore, riprova!",
        'language_set': "La tua lingua √® stata impostata su {0}",
        'links_message': "Link ufficiali AEVO:",
        'available_languages': "Lingue disponibili:\nüá¨üáß EN - Inglese\nüá∑üá∫ RU - Russo\nüá™üá∏ ES - Spagnolo\nüá∫üá¶ UA - Ucraino\nüá´üá∑ FR - Francese\nüáµüá± PL - Polacco\nüáÆüáπ IT - Italiano",
        'lang_error': "Si prega di specificare una lingua dopo il comando. Ad esempio: /lang it",
        'unsupported_language': "Lingua non supportata.",
        'set_alert_long_error': "Formato del comando non valido. Usa il seguente formato: /set_alert_long [ticker dell'attivit√†] [prezzo target]",
        'set_alert_long_success': "üü¢Avviso long impostato correttamente.",
        'set_alert_short_error': "Formato del comando non valido. Usa il seguente formato: /set_alert_short [ticker dell'attivit√†] [prezzo target]",
        'set_alert_short_success': "üî¥Avviso short impostato correttamente.",
        'asset_not_found': "Attivit√† non trovata.",
        'price_of': "üî¥Il prezzo di",
        'fell_below_target': "√® sceso al di sotto del prezzo target di",
        'price_exceeded': "üü¢Il prezzo di",
        'target_price': "ha superato il prezzo target di"
    }
}

def save_user_language(user_id, language):
    conn = sqlite3.connect('aevo_bot.db')
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO users (user_id, language) VALUES (?, ?)", (user_id, language))
    conn.commit()
    conn.close()

def get_user_language(user_id):
    conn = sqlite3.connect('aevo_bot.db')
    c = conn.cursor()
    c.execute("SELECT language FROM users WHERE user_id=?", (user_id,))
    result = c.fetchone()
    conn.close()
    return result[0] if result else None

@bot.message_handler(commands=['lang'])
def set_language(message):
    command, *language = message.text.split()
    if not language:
        user_language = get_user_language(message.chat.id)
        if user_language in texts:
            reply_message = texts[user_language]['lang_error'] + "\n" + texts[user_language]['available_languages']
            bot.reply_to(message, reply_message)
        else:
            reply_message = texts['en']['lang_error'] + "\n" + texts['en']['available_languages']
            bot.reply_to(message, reply_message)
        return

    user_language = language[0].lower()
    if user_language not in ['en', 'ua', 'ru', 'es', 'fr', 'pl', 'it']:
        user_language = get_user_language(message.chat.id)
        if user_language in texts:
            reply_message = texts[user_language]['unsupported_language'] + "\n" + texts[user_language]['available_languages']
            bot.reply_to(message, reply_message)
        else:
            reply_message = texts['en']['unsupported_language'] + "\n" + texts['en']['available_languages']
            bot.reply_to(message, reply_message)
        return

    save_user_language(message.chat.id, user_language)
    if user_language in texts:
        bot.reply_to(message, texts[user_language]['language_set'].format(user_language.upper()))
    else:
        bot.reply_to(message, texts['en']['language_set'].format(user_language.upper()))

def get_crypto_price(asset):
    url = f"https://api.aevo.xyz/index?asset={asset}"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return data
    else:
        return None

@bot.message_handler(commands=['set_alert_long'])
def set_alert_long(message):
    command, *args = message.text.split()
    user_language = get_user_language(message.chat.id)
    if len(args) != 2:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['set_alert_long_error'])
        else:
            bot.reply_to(message, texts['en']['set_alert_long_error'])
        return

    asset, target_price = args[0].upper(), args[1]
    if check_asset_exists(asset):
        conn = sqlite3.connect('aevo_bot.db')
        c = conn.cursor()
        c.execute("INSERT INTO alerts (user_id, asset, target_price) VALUES (?, ?, ?)", (message.chat.id, asset, target_price))
        conn.commit()
        conn.close()
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['set_alert_long_success'])
        else:
            bot.reply_to(message, texts['en']['set_alert_long_success'])
    else:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['asset_not_found'])
        else:
            bot.reply_to(message, texts['en']['asset_not_found'])

@bot.message_handler(commands=['set_alert_short'])
def set_alert_short(message):
    command, *args = message.text.split()
    user_language = get_user_language(message.chat.id)
    if len(args) != 2:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['set_alert_short_error'])
        else:
            bot.reply_to(message, texts['en']['set_alert_short_error'])
        return

    asset, target_price = args[0].upper(), args[1]
    if check_asset_exists(asset):
        conn = sqlite3.connect('aevo_bot.db')
        c = conn.cursor()
        c.execute("INSERT INTO short_alerts (user_id, asset, target_price) VALUES (?, ?, ?)", (message.chat.id, asset, target_price))
        conn.commit()
        conn.close()
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['set_alert_short_success'])
        else:
            bot.reply_to(message, texts['en']['set_alert_short_success'])
    else:
        if user_language in texts:
            bot.reply_to(message, texts[user_language]['asset_not_found'])
        else:
            bot.reply_to(message, texts['en']['asset_not_found'])

def check_asset_exists(asset):
    asset_price = get_crypto_price(asset)
    return asset_price is not None

def create_alerts_table():
    conn = sqlite3.connect('aevo_bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS alerts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    asset TEXT,
                    target_price REAL
                )''')
    conn.commit()
    conn.close()

def create_short_alerts_table():
    conn = sqlite3.connect('aevo_bot.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS short_alerts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                asset TEXT,
                target_price REAL
            )''')
    conn.commit()
    conn.close()

def check_price_alerts():
    check_long_alerts()
    check_short_alerts()

def check_long_alerts():
  conn = sqlite3.connect('aevo_bot.db')
  c = conn.cursor()
  c.execute("SELECT user_id, asset, target_price FROM alerts")
  alerts = c.fetchall()
  conn.close()

  for alert in alerts:
      user_id, asset, target_price = alert
      asset_price = get_crypto_price(asset)
      if asset_price and float(asset_price['price']) >= float(target_price):
          user_language = get_user_language(user_id)
          if user_language in texts:
              response_message = f"{texts[user_language]['price_exceeded']} {asset} {texts[user_language]['target_price']} {target_price}!"
          else:
              response_message = f"{texts['en']['price_exceeded']} {asset} {texts['en']['target_price']} {target_price}!"
          bot.send_message(user_id, response_message)
          conn = sqlite3.connect('aevo_bot.db')
          c = conn.cursor()
          c.execute("DELETE FROM alerts WHERE user_id=? AND asset=? AND target_price=?", (user_id, asset, target_price))
          conn.commit()
          conn.close()

def check_short_alerts():
  conn = sqlite3.connect('aevo_bot.db')
  c = conn.cursor()
  c.execute("SELECT user_id, asset, target_price FROM short_alerts")
  alerts = c.fetchall()
  conn.close()

  for alert in alerts:
      user_id, asset, target_price = alert
      asset_price = get_crypto_price(asset)
      if asset_price and float(asset_price['price']) <= float(target_price):
          user_language = get_user_language(user_id)
          response_message = f"The price of {asset} has fallen below the target price of {target_price}!"
          if user_language in texts:
              response_message = f"{texts[user_language]['price_of']} {asset} {texts[user_language]['fell_below_target']} {target_price}!"
          else:
              response_message = f"{texts['en']['price_of']} {asset} {texts['en']['fell_below_target']} {target_price}!"

          bot.send_message(user_id, response_message)
          conn = sqlite3.connect('aevo_bot.db')
          c = conn.cursor()
          c.execute("DELETE FROM short_alerts WHERE user_id=? AND asset=? AND target_price=?", (user_id, asset, target_price))
          conn.commit()
          conn.close()

def run_scheduler():
    schedule.every(5).seconds.do(check_price_alerts)
    while True:
        schedule.run_pending()
        time.sleep(1)

create_alerts_table()
create_short_alerts_table()

scheduler_thread = threading.Thread(target=run_scheduler)
scheduler_thread.start()

if __name__ == '__main__':
    bot.polling(none_stop=True, skip_pending=True)
